name: Build Easy-budget for Ubuntu

on:  push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_DIR:  build_ubuntu

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/mja-71/ubuntu-qt-dev:release-0.1
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{env.BUILD_DIR}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G "Unix Makefiles" 

    - name: Build
      # Build your program with the given configuration
      run: |
         cmake --build ${{env.BUILD_DIR}} --config ${{env.BUILD_TYPE}} -- -j 8

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}
    
    - name: Packaging 
      run: |
         cd ${{env.BUILD_DIR}}
         cpack --config "../setup/cpack_config.cmake" -D CPACK_PROJECT_CONFIG_FILE="../setup/cpack_generator.cmake" -G DEB .

